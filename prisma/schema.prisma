// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  giver    Giving[] @relation("Giver")
  recipien Giving[] @relation("Recipient")

  roomsIDs String[] @db.ObjectId
  rooms    Room[]   @relation(fields: [roomsIDs], references: [id])

  accounts   Account[]
  ownedRooms Room[]    @relation("Owned")

  notifications Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imgNum      Int
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  finished    Boolean

  membersIDs String[] @db.ObjectId
  members    User[]   @relation(fields: [membersIDs], references: [id])

  user User @relation("Owned", fields: [userId], references: [id], onDelete: Cascade)

  giving Giving[] @relation("Giving")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      String
  roomId    String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Giving {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId      String   @db.ObjectId
  giverId     String   @db.ObjectId
  recipientId String   @db.ObjectId
  createdAt   DateTime @default(now())

  giver    User @relation("Giver", fields: [giverId], references: [id], onDelete: Cascade)
  recipien User @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  room Room @relation("Giving", fields: [roomId], references: [id], onDelete: Cascade)
}
